stages:
  - build
  - deploy

variables:
  PROJECT_ID: unlimitedmarketplace
  REGION: europe-north1
  GCLOUD_SERVICE_KEY: $GCLOUD_SERVICE_KEY

services:
  - docker:dind

before_script:
  # Ensure gcloud is available and provide debug information
  - pwsh -Command 'Write-Host "Checking if gcloud is installed..."'
  - pwsh -Command 'if (-Not (Test-Path "$Env:USERPROFILE\google-cloud-sdk\bin\gcloud.cmd")) { Write-Host "gcloud not found, installing..."; Invoke-WebRequest https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip -OutFile google-cloud-sdk.zip; Expand-Archive google-cloud-sdk.zip -DestinationPath $Env:USERPROFILE -Force; Remove-Item google-cloud-sdk.zip; Start-Process cmd -ArgumentList "/c $Env:USERPROFILE\google-cloud-sdk\install.bat" -Wait; Write-Host "gcloud installed" } else { Write-Host "gcloud already installed" }'
  - pwsh -Command '$Env:Path += ";$Env:USERPROFILE\google-cloud-sdk\bin"'
  - pwsh -Command 'Write-Host $Env:Path'
  - pwsh -Command 'Get-Command gcloud.cmd'

  # Authenticate with Google Cloud
  - pwsh -Command 'echo $Env:GCLOUD_SERVICE_KEY | Out-File -FilePath $Env:HOME\gcloud-service-key.b64 -Encoding ascii'
  - pwsh -Command '[System.Convert]::FromBase64String((Get-Content -Raw -Path $Env:HOME\gcloud-service-key.b64)) | ForEach-Object { $_ } | Set-Content -Path $Env:HOME\gcloud-service-key.json -AsByteStream'
  - pwsh -Command '$gcloud = "$Env:USERPROFILE\google-cloud-sdk\bin\gcloud.cmd"; & $gcloud auth activate-service-account --key-file $Env:HOME\gcloud-service-key.json'
  - pwsh -Command '$gcloud = "$Env:USERPROFILE\google-cloud-sdk\bin\gcloud.cmd"; & $gcloud config set project $Env:PROJECT_ID'
  - pwsh -Command '$gcloud = "$Env:USERPROFILE\google-cloud-sdk\bin\gcloud.cmd"; & $gcloud auth configure-docker'
  - pwsh -Command '$gcloud = "$Env:USERPROFILE\google-cloud-sdk\bin\gcloud.cmd"; & $gcloud services enable artifactregistry.googleapis.com'
  - pwsh -Command '$gcloud = "$Env:USERPROFILE\google-cloud-sdk\bin\gcloud.cmd"; & $gcloud services enable run.googleapis.com'

build:
  stage: build
  script:
    - bash build_and_push.sh
  tags:
    - docker
  only:
    - workbranch

deploy:
  stage: deploy
  script:
    - bash deploy.sh
  tags:
    - docker
  only:
    - workbranch


